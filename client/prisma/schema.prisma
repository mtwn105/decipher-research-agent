generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  notebooks     Notebook[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Jwks {
  id         String   @id
  publicKey  String
  privateKey String
  createdAt  DateTime

  @@map("jwks")
}

enum NotebookDocumentSourceType {
  UPLOAD
  URL
  MANUAL
}

model Notebook {
  id        String             @id @default(uuid())
  userId    String
  title     String?
  topic     String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents NotebookDocument[]
  output    NotebookOutput?

  @@index([userId])
  @@map("notebook")
}

model NotebookDocument {
  id         String                     @id @default(uuid())
  notebookId String
  sourceType NotebookDocumentSourceType
  sourceUrl  String?
  filePath   String?
  filename   String?
  content    String?                    @db.Text
  createdAt  DateTime                   @default(now())
  notebook   Notebook                   @relation(fields: [notebookId], references: [id], onDelete: Cascade)

  @@index([notebookId])
  @@map("notebook_document")
}

model NotebookOutput {
  id         String   @id @default(uuid())
  notebookId String   @unique
  summary    String   @db.Text
  createdAt  DateTime @default(now())
  notebook   Notebook @relation(fields: [notebookId], references: [id], onDelete: Cascade)

  @@map("notebook_output")
}
